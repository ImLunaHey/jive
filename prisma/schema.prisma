// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildMember {
  id String @id @unique

  xp    Int @default(0)
  coins Int @default(0)

  guild      Guild       @relation(fields: [guildId], references: [id])
  guildId    String
  rateLimits RateLimit[]
}

model Guild {
  id String @id @unique

  invites    Invite[]
  members    GuildMember[]
  settings   Settings      @relation(fields: [settingsId], references: [id])
  settingsId String        @unique
}

model Invite {
  code String @id @unique

  uses Int @default(0)

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
}

model WelcomeSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // Whether the bot should wait until the user accepts the rules
  waitUntilGate Boolean @default(false)

  // The channel where the join message is sent
  joinChannelId String?

  // Should the message be sent to a DM instead of channel
  joinDm Boolean @default(false)

  // The message sent to the user
  joinMessage String?

  // Roles are given to the user once they accept the rules
  addRoles String[]

  // Roles are removed from the user once they accept the rules
  removeRoles String[]

  settings Settings?
}

model LevelingSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The channel where the leveling messages are sent
  levelingChannelId String?

  // The message sent to the user when they level up
  levelingMessage String?

  settings Settings?
}

model StarboardSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The channel where the starboard messages are sent
  starboardChannelId String?

  // The minimum amount of reactions required to send a message to the starboard
  minimumReactions Int @default(3)

  // The reactions that needs to be used
  // If this is empty then any reaction can be used
  reactions String[]

  settings Settings?
}

model InviteTrackingSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The channel where the invite tracking messages are sent
  inviteTrackingChannelId String?

  // If we should log when an invite is used
  inviteTrackingMessage String?

  settings Settings?
}

model CustomCommandExtraMessages {
  id String @id @unique @default(uuid())

  // If we should log when the trigger is sent
  message String?

  // The channel where the message is sent
  // If this is null then it will be sent in the same channel as the trigger
  channelId String?

  // The command that triggered this
  customCommand   CustomCommand? @relation(fields: [customCommandId], references: [id])
  customCommandId String?
}

model CustomCommand {
  id String @id @unique @default(uuid())

  // The channel where the command must be sent
  // If this is null then it can be sent in any channel
  triggerChannelId String?

  // The message needed to trigger this
  // If this is blank then it will trigger on any message
  triggerMessage String?

  // If we should log when the trigger is sent
  responseMessage String?

  // Roles to add to the user when the trigger is sent
  addRoles String[]

  // Roles to remove from the user when the trigger is sent
  removeRoles String[]

  // Extra messages to send when the trigger is sent
  extraMessages CustomCommandExtraMessages[]

  // Whether the trigger should be deleted when the response is sent
  deleteTrigger Boolean @default(false)

  CustomCommandSettings   CustomCommandSettings? @relation(fields: [customCommandSettingsId], references: [id])
  customCommandSettingsId String?
}

model CustomCommandSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The custom commands
  customCommands CustomCommand[]

  settings Settings?
}

model AuditLog {
  id String @id @unique @default(uuid())

  // The channel where the audit log messages are sent
  auditLogChannelId String?

  // If we should log when a user is banned
  ban Boolean @default(false)

  // If we should log when a user is unbanned
  unban Boolean @default(false)

  // If we should log when a user is kicked
  kick Boolean @default(false)

  // If we should log when a user is muted
  mute Boolean @default(false)

  // If we should log when a user is unmuted
  unmute Boolean @default(false)

  // If we should log when a user is warned
  warn Boolean @default(false)

  // If we should log when a user joins
  join Boolean @default(false)

  // If we should log when a message is deleted
  messageDelete Boolean @default(false)

  // If we should log when a message is deleted
  bulkMessageDelete Boolean @default(false)

  // Should we ignore bots?
  ignoreBots Boolean @default(false)

  // Roles to ignore
  ignoredRoles String[]

  // Users to ignore
  ignoredUsers String[]

  // Channels to ignore
  ignoredChannels String[]

  AuditLogSettings   AuditLogSettings? @relation(fields: [auditLogSettingsId], references: [id])
  auditLogSettingsId String?
}

model AuditLogSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  auditLogs AuditLog[]

  settings Settings?
}

model AutoDelete {
  id String @id @unique @default(uuid())

  // true = delete the messages that DO NOT trigger the command
  // false = delete the messages that trigger the command
  inverted Boolean @default(false)

  // How long until the message is deleted
  timeout Int @default(0)

  // The channel where the auto-delete is triggered
  // If this is null then it can be triggered in any channel
  triggerChannelId String?

  // The message that triggers the auto-delete
  // If this is blank then it will trigger on any message
  triggerMessage String?

  // A response message to send to the user
  replyMessage String?

  // The timeout before the reply message is deleted
  // If this is null then it will not be deleted
  replyTimeout Int?

  AutoDeleteSettings   AutoDeleteSettings? @relation(fields: [autoDeleteSettingsId], references: [id])
  autoDeleteSettingsId String?
}

model AutoDeleteSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  autoDeletes AutoDelete[]

  settings Settings?
}

model DynamicChannel {
  id String @id @unique @default(uuid())

  // The dynamic channel
  channelId String

  // The template for that channel
  channelTemplate String

  DynamicChannelNamesSettings   DynamicChannelNamesSettings? @relation(fields: [dynamicChannelNamesSettingsId], references: [id])
  dynamicChannelNamesSettingsId String?
}

model DynamicChannelNamesSettings {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  channels DynamicChannel[]

  settings Settings?
}

model Settings {
  id String @id @unique @default(uuid())

  auditLog           AuditLogSettings @relation(fields: [auditLogSettingsId], references: [id])
  auditLogSettingsId String           @unique

  autoDelete           AutoDeleteSettings @relation(fields: [autoDeleteSettingsId], references: [id])
  autoDeleteSettingsId String             @unique

  dynamicChannelNames           DynamicChannelNamesSettings @relation(fields: [dynamicChannelNamesSettingsId], references: [id])
  dynamicChannelNamesSettingsId String                      @unique

  welcome           WelcomeSettings @relation(fields: [welcomeSettingsId], references: [id])
  welcomeSettingsId String          @unique

  leveling           LevelingSettings @relation(fields: [levelingSettingsId], references: [id])
  levelingSettingsId String           @unique

  starboard           StarboardSettings @relation(fields: [starboardSettingsId], references: [id])
  starboardSettingsId String            @unique

  inviteTracking           InviteTrackingSettings @relation(fields: [inviteTrackingSettingsId], references: [id])
  inviteTrackingSettingsId String                 @unique

  customCommand           CustomCommandSettings @relation(fields: [customCommandSettingsId], references: [id])
  customCommandSettingsId String                @unique

  guild Guild?
}

model RateLimit {
  id String @id @unique

  count Int @default(0)

  lastReset DateTime @default(now())

  guildMember   GuildMember @relation(fields: [guildMemberId], references: [id])
  guildMemberId String
}
