// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildMember {
  id         String      @id @unique
  guild      Guild       @relation(fields: [guildId], references: [id])
  guildId    String
  xp         Int         @default(0)
  coins      Int         @default(0)
  items      Item[]
  rateLimits RateLimit[]
}

model Guild {
  id       String        @id @unique
  invites  Invite[]
  coins    Int           @default(0)
  members  GuildMember[]
  settings Settings?
}

model Invite {
  code    String @id @unique
  uses    Int
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
}

model Welcome {
  id                 String   @id @unique @default(uuid())
  enabled            Boolean  @default(false)
  waitUntilGate      Boolean
  joinChannelId      String?
  joinDm             Boolean
  joinMessage        String?
  // Timeout in milliseconds
  joinMessageTimeout Int      @default(2000)
  leaveChannelId     String?
  leaveDm            Boolean
  leaveMessage       String?
  addRoles           String[]
  removeRoles        String[]
  settings           Settings @relation(fields: [settingsId], references: [id])
  settingsId         String   @unique
}

model Leveling {
  id                String   @id @unique @default(uuid())
  enabled           Boolean  @default(false)
  levelingChannelId String?
  levelingMessage   String?
  settings          Settings @relation(fields: [settingsId], references: [id])
  settingsId        String   @unique
}

model Starboard {
  id                 String   @id @unique @default(uuid())
  enabled            Boolean  @default(false)
  starboardChannelId String
  minimumReactions   Int
  allowedReactions   String[]
  triggerChannelId   String?
  settings           Settings @relation(fields: [settingsId], references: [id])
  settingsId         String
}

model InviteTracking {
  id         String   @id @unique @default(uuid())
  enabled    Boolean  @default(false)
  channelId  String?
  message    String?
  settings   Settings @relation(fields: [settingsId], references: [id])
  settingsId String   @unique
}

model ExtraMessage {
  id              String        @id @unique @default(uuid())
  message         String
  channelId       String?
  customCommand   CustomCommand @relation(fields: [customCommandId], references: [id])
  customCommandId String        @unique
}

model CustomCommand {
  id               String         @id @unique @default(uuid())
  name             String         @unique
  enabled          Boolean        @default(false)
  triggerChannelId String?
  triggerMessage   String?
  deleteTrigger    Boolean
  responseMessage  String?
  responseTimeout  Int
  addRoles         String[]
  removeRoles      String[]
  extraMessages    ExtraMessage[]
  settings         Settings?      @relation(fields: [settingsId], references: [id])
  settingsId       String?
}

enum Action {
  JOIN                @map("JOIN")
  LEAVE               @map("LEAVE")
  BAN                 @map("BAN")
  KICK                @map("KICK")
  MUTE                @map("MUTE")
  UNMUTE              @map("UNMUTE")
  WARN                @map("WARN")
  UNWARN              @map("UNWARN")
  PURGE               @map("PURGE")
  ROLE_ADD            @map("ROLE_ADD")
  ROLE_REMOVE         @map("ROLE_REMOVE")
  ROLE_CREATE         @map("ROLE_CREATE")
  ROLE_DELETE         @map("ROLE_DELETE")
  ROLE_EDIT           @map("ROLE_EDIT")
  CHANNEL_CREATE      @map("CHANNEL_CREATE")
  CHANNEL_DELETE      @map("CHANNEL_DELETE")
  CHANNEL_EDIT        @map("CHANNEL_EDIT")
  MESSAGE_DELETE      @map("MESSAGE_DELETE")
  MESSAGE_BULK_DELETE @map("MESSAGE_BULK_DELETE")
  MESSAGE_EDIT        @map("MESSAGE_EDIT")
  VOICE_KICK          @map("VOICE_KICK")
  VOICE_MUTE          @map("VOICE_MUTE")
  VOICE_UNMUTE        @map("VOICE_UNMUTE")
  VOICE_MOVE          @map("VOICE_MOVE")
  VOICE_DEAFEN        @map("VOICE_DEAFEN")
  VOICE_UNDEAFEN      @map("VOICE_UNDEAFEN")
  GUILD_EDIT          @map("GUILD_EDIT")
  INVITE_CREATE       @map("INVITE_CREATE")
  INVITE_DELETE       @map("INVITE_DELETE")
  EMOJI_CREATE        @map("EMOJI_CREATE")
  EMOJI_DELETE        @map("EMOJI_DELETE")
  EMOJI_EDIT          @map("EMOJI_EDIT")
}

model AuditLog {
  id              String    @id @unique @default(uuid())
  enabled         Boolean   @default(false)
  channelId       String
  // By default ignore all actions
  // This is to prevent spamming the audit log channel
  ignoredActions  Action[]  @default([JOIN, LEAVE, BAN, KICK, MUTE, UNMUTE, WARN, UNWARN, PURGE, ROLE_ADD, ROLE_REMOVE, ROLE_CREATE, ROLE_DELETE, ROLE_EDIT, CHANNEL_CREATE, CHANNEL_DELETE, CHANNEL_EDIT, MESSAGE_DELETE, MESSAGE_BULK_DELETE, MESSAGE_EDIT, VOICE_KICK, VOICE_MUTE, VOICE_UNMUTE, VOICE_MOVE, VOICE_DEAFEN, VOICE_UNDEAFEN, GUILD_EDIT, INVITE_CREATE, INVITE_DELETE])
  ignoreBots      Boolean   @default(false)
  ignoredRoles    String[]
  ignoredUsers    String[]
  ignoredChannels String[]
  settings        Settings? @relation(fields: [settingsId], references: [id])
  settingsId      String?
}

model AutoDelete {
  id               String  @id @unique @default(uuid())
  enabled          Boolean @default(false)
  inverted         Boolean
  timeout          Int
  triggerChannelId String?
  triggerMessage   String?
  replyMessage     String?
  replyTimeout     Int
}

model DynamicChannel {
  id         String    @id @unique @default(uuid())
  enabled    Boolean   @default(false)
  channelId  String
  template   String
  settings   Settings? @relation(fields: [settingsId], references: [id])
  settingsId String?
}

model Settings {
  id              String            @id @unique @default(uuid())
  featuresEnabled FeaturesEnabled[]
  dynamicChannels DynamicChannel[]
  starboards      Starboard[]
  welcome         Welcome?
  customCommands  CustomCommand[]
  auditLogs       AuditLog[]
  inviteTracking  InviteTracking?
  leveling        Leveling?
  guild           Guild             @relation(fields: [guildId], references: [id])
  guildId         String            @unique
}

model RateLimit {
  id            String      @id @unique @default(uuid())
  count         Int
  lastReset     DateTime    @default(now())
  guildMember   GuildMember @relation(fields: [guildMemberId], references: [id])
  guildMemberId String
}

enum FeaturesEnabled {
  AUDIT_LOG             @map("AUDIT_LOG")
  AUTO_DELETE           @map("AUTO_DELETE")
  CUSTOM_COMMANDS       @map("CUSTOM_COMMANDS")
  DEBUG                 @map("DEBUG")
  DYNAMIC_CHANNEL_NAMES @map("DYNAMIC_CHANNEL_NAMES")
  ECONOMY               @map("ECONOMY")
  INVITE_TRACKING       @map("INVITE_TRACKING")
  LEVELING              @map("LEVELING")
  MODERATION            @map("MODERATION")
  REDDIT                @map("REDDIT")
  STARBOARD             @map("STARBOARD")
  VOID                  @map("VOID")
  WELCOME               @map("WELCOME")
}

enum Category {
  CONSUMABLES  @map("CONSUMABLES") // Consumables are items that can be used once and then disappear
  COLLECTABLES @map("COLLECTABLES") // Collectables are rare/epic items
  WEAPONS      @map("WEAPONS") // Weapons are items that can be used to attack other players
  ARMOR        @map("ARMOR") // Armor is items that can be used to protect yourself from attacks
  TOOLS        @map("TOOLS") // Tools are items that can be used to help you in your adventures
}

enum Rarity {
  COMMON    @map("COMMON")
  UNCOMMON  @map("UNCOMMON")
  RARE      @map("RARE")
  EPIC      @map("EPIC")
  LEGENDARY @map("LEGENDARY")
}

model Item {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String
  category    Category
  rarity      Rarity   @default(COMMON)
  price       Int

  // If the item is a consumable, it will have a quantity
  quantity Int?

  // If the item is a consumable, it will have a cooldown
  cooldown Int?

  // If the item is a weapon, it will have a damage value
  damage Int?

  // If the item is armor, it will have a defense value
  defense Int?

  // If the item is a tool, it will have a bonus value
  bonus Int?

  // If the item is a collectable, it will have a chance value
  chance Int?

  owner   GuildMember? @relation(fields: [ownerId], references: [id])
  ownerId String?
}
