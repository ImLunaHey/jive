// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildMember {
  id String @id @unique

  xp    Int @default(0)
  coins Int @default(0)

  guild      Guild       @relation(fields: [guildId], references: [id])
  guildId    String
  rateLimits RateLimit[]
}

model Guild {
  id String @id @unique

  invites    Invite[]
  members    GuildMember[]
  features   Features      @relation(fields: [featuresId], references: [id])
  featuresId String        @unique
}

model Invite {
  code String @id @unique

  uses Int @default(0)

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
}

// Joins -> Accepts Rules -> Welcome Message
model WelcomeFeature {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The channel where the rules are sent
  // This is where the user must send the rulesCommand to accept the rules
  rulesChannelId String?

  // The message the user must send to accept the rules
  rulesCommand String?

  // Roles are given to the user once they accept the rules
  addRoles String[]

  // Roles are removed from the user once they accept the rules
  removeRoles String[]

  // The channel where the welcome message is sent
  welcomeChannelId String?

  // The message sent to the user when they accept the rules
  welcomeMessage String?

  feature Features?
}

model LevelingFeature {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The channel where the leveling messages are sent
  levelingChannelId String?

  // The message sent to the user when they level up
  levelingMessage String?

  feature Features?
}

model AutoRolesFeature {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // Roles are given to the user when they join the server
  addRoles String[]

  feature Features?
}

model StarboardFeature {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The channel where the starboard messages are sent
  starboardChannelId String?

  // The minimum amount of stars required to send a message to the starboard
  minimumStars Int @default(3)

  feature Features?
}

model InviteTrackingFeature {
  id String @id @unique @default(uuid())

  // Whether the feature is enabled or not
  enabled Boolean @default(false)

  // The channel where the invite tracking messages are sent
  inviteTrackingChannelId String?

  // The message sent to the channel when an invite is used
  inviteTrackingMessage String?

  feature Features?
}

model Features {
  id String @id @unique @default(uuid())

  autoRoles          AutoRolesFeature @relation(fields: [autoRolesFeatureId], references: [id])
  autoRolesFeatureId String           @unique

  welcome          WelcomeFeature @relation(fields: [welcomeFeatureId], references: [id])
  welcomeFeatureId String         @unique

  leveling          LevelingFeature @relation(fields: [levelingFeatureId], references: [id])
  levelingFeatureId String          @unique

  starboard          StarboardFeature @relation(fields: [starboardFeatureId], references: [id])
  starboardFeatureId String           @unique

  inviteTracking          InviteTrackingFeature @relation(fields: [inviteTrackingFeatureId], references: [id])
  inviteTrackingFeatureId String                @unique

  guild Guild?
}

model RateLimit {
  id String @id @unique

  count Int @default(0)

  lastReset DateTime @default(now())

  guildMember   GuildMember @relation(fields: [guildMemberId], references: [id])
  guildMemberId String
}
