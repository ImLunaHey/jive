// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildMember {
  id      String @id @unique
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
  xp      Int    @default(0)
  coins   Int    @default(0)

  // Health 
  health Int @default(100)

  // Their current location
  location Location @default(FOREST)

  // The user's inventory
  inventory Item[] @relation("inventory")

  rateLimits RateLimit[]

  // Stats
  strength     Int @default(0)
  dexterity    Int @default(0)
  constitution Int @default(0)
  intelligence Int @default(0)
  wisdom       Int @default(0)
  charisma     Int @default(0)

  // Untouchable stats
  luck Int @default(0)

  // Strength
  woodcutting Int @default(0)
  smithing    Int @default(0)

  // Dexterity
  crafting Int @default(0)
  stealth  Int @default(0)

  // Constitution
  mining  Int @default(0)
  farming Int @default(0)

  // Intelligence
  alchemy  Int @default(0)
  research Int @default(0)

  // Wisdom
  enchanting Int @default(0)
  fishing    Int @default(0) // <-- not sure about this one being wisdom

  // Charisma
  summoning  Int @default(0)
  performing Int @default(0)

  // Others?
  cooking Int @default(0)

  // The user's current encounter
  encounter   Encounter? @relation("currentEncounter", fields: [encounterId], references: [id])
  encounterId String?

  // Purchases
  purchases Purchase[]

  // The user's previous encounters
  previousEncounters Encounter[] @relation("previousEncounters")
}

model Purchase {
  id String @id @unique @default(uuid())

  member   GuildMember @relation(fields: [memberId], references: [id])
  memberId String

  shopItem   ItemTemplate @relation(fields: [shopItemId], references: [id])
  shopItemId String

  quantity Int

  purchased DateTime @default(now())
}

model Guild {
  id         String        @id @unique
  invites    Invite[]
  coins      Int           @default(0)
  members    GuildMember[]
  settings   Settings?
  encounters Encounter[]
}

model Invite {
  code    String @id @unique
  uses    Int
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
}

model Welcome {
  id                 String   @id @unique @default(uuid())
  enabled            Boolean  @default(false)
  waitUntilGate      Boolean
  joinChannelId      String?
  joinDm             Boolean
  joinMessage        String?
  // Timeout in milliseconds
  joinMessageTimeout Int      @default(2000)
  leaveChannelId     String?
  leaveDm            Boolean
  leaveMessage       String?
  addRoles           String[]
  removeRoles        String[]
  settings           Settings @relation(fields: [settingsId], references: [id])
  settingsId         String   @unique
}

model Leveling {
  id                String   @id @unique @default(uuid())
  enabled           Boolean  @default(false)
  levelingChannelId String?
  levelingMessage   String?
  settings          Settings @relation(fields: [settingsId], references: [id])
  settingsId        String   @unique
}

model Starboard {
  id                 String   @id @unique @default(uuid())
  enabled            Boolean  @default(false)
  starboardChannelId String
  minimumReactions   Int
  allowedReactions   String[]
  triggerChannelId   String?
  settings           Settings @relation(fields: [settingsId], references: [id])
  settingsId         String
}

model InviteTracking {
  id         String   @id @unique @default(uuid())
  enabled    Boolean  @default(false)
  channelId  String?
  message    String?
  settings   Settings @relation(fields: [settingsId], references: [id])
  settingsId String   @unique
}

model ExtraMessage {
  id              String        @id @unique @default(uuid())
  message         String
  channelId       String?
  customCommand   CustomCommand @relation(fields: [customCommandId], references: [id])
  customCommandId String        @unique
}

model CustomCommand {
  id               String         @id @unique @default(uuid())
  name             String         @unique
  enabled          Boolean        @default(false)
  triggerChannelId String?
  triggerMessage   String?
  deleteTrigger    Boolean
  responseMessage  String?
  responseTimeout  Int
  addRoles         String[]
  removeRoles      String[]
  extraMessages    ExtraMessage[]
  settings         Settings?      @relation(fields: [settingsId], references: [id])
  settingsId       String?
}

enum Action {
  JOIN                @map("JOIN")
  LEAVE               @map("LEAVE")
  BAN                 @map("BAN")
  KICK                @map("KICK")
  MUTE                @map("MUTE")
  UNMUTE              @map("UNMUTE")
  WARN                @map("WARN")
  UNWARN              @map("UNWARN")
  PURGE               @map("PURGE")
  ROLE_ADD            @map("ROLE_ADD")
  ROLE_REMOVE         @map("ROLE_REMOVE")
  ROLE_CREATE         @map("ROLE_CREATE")
  ROLE_DELETE         @map("ROLE_DELETE")
  ROLE_EDIT           @map("ROLE_EDIT")
  CHANNEL_CREATE      @map("CHANNEL_CREATE")
  CHANNEL_DELETE      @map("CHANNEL_DELETE")
  CHANNEL_EDIT        @map("CHANNEL_EDIT")
  MESSAGE_DELETE      @map("MESSAGE_DELETE")
  MESSAGE_BULK_DELETE @map("MESSAGE_BULK_DELETE")
  MESSAGE_EDIT        @map("MESSAGE_EDIT")
  VOICE_KICK          @map("VOICE_KICK")
  VOICE_MUTE          @map("VOICE_MUTE")
  VOICE_UNMUTE        @map("VOICE_UNMUTE")
  VOICE_MOVE          @map("VOICE_MOVE")
  VOICE_DEAFEN        @map("VOICE_DEAFEN")
  VOICE_UNDEAFEN      @map("VOICE_UNDEAFEN")
  GUILD_EDIT          @map("GUILD_EDIT")
  INVITE_CREATE       @map("INVITE_CREATE")
  INVITE_DELETE       @map("INVITE_DELETE")
  EMOJI_CREATE        @map("EMOJI_CREATE")
  EMOJI_DELETE        @map("EMOJI_DELETE")
  EMOJI_EDIT          @map("EMOJI_EDIT")
  MEMBER_UPDATE       @map("MEMBER_UPDATE")
}

model AuditLog {
  id              String    @id @unique @default(uuid())
  enabled         Boolean   @default(false)
  channelId       String
  // By default ignore all actions
  // This is to prevent spamming the audit log channel
  ignoredActions  Action[]  @default([JOIN, LEAVE, BAN, KICK, MUTE, UNMUTE, WARN, UNWARN, PURGE, ROLE_ADD, ROLE_REMOVE, ROLE_CREATE, ROLE_DELETE, ROLE_EDIT, CHANNEL_CREATE, CHANNEL_DELETE, CHANNEL_EDIT, MESSAGE_DELETE, MESSAGE_BULK_DELETE, MESSAGE_EDIT, VOICE_KICK, VOICE_MUTE, VOICE_UNMUTE, VOICE_MOVE, VOICE_DEAFEN, VOICE_UNDEAFEN, GUILD_EDIT, INVITE_CREATE, INVITE_DELETE])
  ignoreBots      Boolean   @default(false)
  ignoredRoles    String[]
  ignoredUsers    String[]
  ignoredChannels String[]
  settings        Settings? @relation(fields: [settingsId], references: [id])
  settingsId      String?
}

model AutoDelete {
  id               String  @id @unique @default(uuid())
  enabled          Boolean @default(false)
  inverted         Boolean
  timeout          Int
  triggerChannelId String?
  triggerMessage   String?
  replyMessage     String?
  replyTimeout     Int
}

model DynamicChannel {
  id         String    @id @unique @default(uuid())
  enabled    Boolean   @default(false)
  channelId  String
  template   String
  settings   Settings? @relation(fields: [settingsId], references: [id])
  settingsId String?
}

model Settings {
  id              String            @id @unique @default(uuid())
  featuresEnabled FeaturesEnabled[]
  dynamicChannels DynamicChannel[]
  starboards      Starboard[]
  welcome         Welcome?
  customCommands  CustomCommand[]
  auditLogs       AuditLog[]
  inviteTracking  InviteTracking?
  leveling        Leveling?
  guild           Guild             @relation(fields: [guildId], references: [id])
  guildId         String            @unique
}

model RateLimit {
  id            String      @id @unique @default(uuid())
  count         Int
  lastReset     DateTime    @default(now())
  guildMember   GuildMember @relation(fields: [guildMemberId], references: [id])
  guildMemberId String
}

enum FeaturesEnabled {
  AUDIT_LOG             @map("AUDIT_LOG")
  AUTO_DELETE           @map("AUTO_DELETE")
  CUSTOM_COMMANDS       @map("CUSTOM_COMMANDS")
  DEBUG                 @map("DEBUG")
  DYNAMIC_CHANNEL_NAMES @map("DYNAMIC_CHANNEL_NAMES")
  ECONOMY               @map("ECONOMY")
  INVITE_TRACKING       @map("INVITE_TRACKING")
  LEVELING              @map("LEVELING")
  MODERATION            @map("MODERATION")
  REDDIT                @map("REDDIT")
  STARBOARD             @map("STARBOARD")
  VOID                  @map("VOID")
  WELCOME               @map("WELCOME")
}

enum ItemType {
  WEAPON @map("WEAPON")
  ARMOR  @map("ARMOR")
  FOOD   @map("FOOD")
}

enum ItemSubType {
  // Weapon
  SWORD    @map("SWORD")
  AXE      @map("AXE")
  BOW      @map("BOW")
  STAFF    @map("STAFF")
  DAGGER   @map("DAGGER")
  SPEAR    @map("SPEAR")
  WAND     @map("WAND")
  FIST     @map("FIST")
  CROSSBOW @map("CROSSBOW")

  // Armor
  HELMET @map("HELMET")
  CHEST  @map("CHEST")
  LEGS   @map("LEGS")
  FEET   @map("FEET")
  NECK   @map("NECK")
  RING   @map("RING")
  SHIELD @map("SHIELD")
}

enum Rarity {
  COMMON    @map("COMMON")
  UNCOMMON  @map("UNCOMMON")
  RARE      @map("RARE")
  EPIC      @map("EPIC")
  LEGENDARY @map("LEGENDARY")
  MYTHIC    @map("MYTHIC")
}

enum Slot {
  // Weapon
  MAIN_HAND @map("MAIN_HAND")
  // Offhand
  OFF_HAND  @map("OFF_HAND")

  // Helmet
  HEAD @map("HEAD")
  // Necklace
  NECK @map("NECK")
  // Chestplate
  BODY @map("BODY")
  // Ring
  RING @map("RING")
  // Leggings
  LEGS @map("LEGS")
  // Shoes
  FEET @map("FEET")
}

model Shop {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  location    Location

  items ItemTemplate[]
}

model ItemTemplate {
  id          String @id @unique @default(uuid())
  name        String
  emoji       String
  description String
  rarity      Rarity @default(COMMON)
  price       Int

  // If the item is a consumable, it will have a quantity
  quantity Int?

  // If the item is a consumable, it will have a cooldown
  cooldown Int?

  // If the item is a weapon, it will have a damage value
  damage Int?

  // If the item is armor, it will have a defence value
  defence Int?

  // If the item is a tool, it will have a bonus value
  bonus Int?

  // If the item is a healing item, it will have a heal value
  heal Int?

  // If the item is a collectable, it will have a chance value
  chance Int?

  // What type of item is this
  type ItemType

  // The sub-type of the item
  subType ItemSubType

  // Which slot does this item belong to
  slot Slot?

  // Sales history
  purchases Purchase[]

  // Which shop does this item belong to
  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String

  // The items that use this as a template
  Item Item[]
}

model Item {
  id          String @id @unique @default(uuid())
  name        String
  emoji       String
  description String
  rarity      Rarity @default(COMMON)
  price       Int

  // If the item is a consumable, it will have a quantity
  quantity Int?

  // If the item is a consumable, it will have a cooldown
  cooldown Int?

  // If the item is a weapon, it will have a damage value
  damage Int?

  // If the item is armor, it will have a defence value
  defence Int?

  // If the item is a tool, it will have a bonus value
  bonus Int?

  // If the item is a healing item, it will have a heal value
  heal Int?

  // If the item is a collectable, it will have a chance value
  chance Int?

  // Who does this item belong to
  owner   GuildMember @relation("inventory", fields: [ownerId], references: [id])
  ownerId String

  // Is this item equipped
  equipped Boolean @default(false)

  // What is the template for this item
  template   ItemTemplate @relation(fields: [templateId], references: [id])
  templateId String

  // What type of item is this
  type ItemType

  // The sub-type of the item
  subType ItemSubType

  // Which slot does this item belong to
  slot Slot?
}

enum Location {
  FOREST          @map("FOREST")
  DESERT          @map("DESERT")
  CAVE            @map("CAVE")
  MOUNTAIN        @map("MOUNTAIN")
  BEACH           @map("BEACH")
  TOWN            @map("TOWN")
  CITY            @map("CITY")
  VILLAGE         @map("VILLAGE")
  FARM            @map("FARM")
  RIVER           @map("RIVER")
  LAKE            @map("LAKE")
  OCEAN           @map("OCEAN")
  VOLCANO         @map("VOLCANO")
  ICEBERG         @map("ICEBERG")
  SNOWY_MOUNTAIN  @map("SNOWY_MOUNTAIN")
  SNOWY_FOREST    @map("SNOWY_FOREST")
  SNOWY_BEACH     @map("SNOWY_BEACH")
  SNOWY_RIVER     @map("SNOWY_RIVER")
  SNOWY_LAKE      @map("SNOWY_LAKE")
  SNOWY_OCEAN     @map("SNOWY_OCEAN")
  SNOWY_VOLCANO   @map("SNOWY_VOLCANO")
  SNOWY_ICEBERG   @map("SNOWY_ICEBERG")
  SNOWY_TOWN      @map("SNOWY_TOWN")
  SNOWY_CITY      @map("SNOWY_CITY")
  SNOWY_VILLAGE   @map("SNOWY_VILLAGE")
  SNOWY_FARM      @map("SNOWY_FARM")
  SNOWY_DESERT    @map("SNOWY_DESERT")
  SNOWY_CAVE      @map("SNOWY_CAVE")
  SNOWY_PLAINS    @map("SNOWY_PLAINS")
  SNOWY_HILLS     @map("SNOWY_HILLS")
  SNOWY_SWAMP     @map("SNOWY_SWAMP")
  SNOWY_JUNGLE    @map("SNOWY_JUNGLE")
  SNOWY_TAIGA     @map("SNOWY_TAIGA")
  SNOWY_SAVANNA   @map("SNOWY_SAVANNA")
  SNOWY_BADLANDS  @map("SNOWY_BADLANDS")
  SNOWY_WASTELAND @map("SNOWY_WASTELAND")
}

model CreatureTemplate {
  id          String   @id @unique @default(uuid())
  name        String
  emoji       String
  description String
  location    Location
  rarity      Rarity   @default(COMMON)

  // How much health does this creature have
  health Int

  // How much damage does this creature do
  attack Int @default(1)

  // How much defence does this creature have
  defence Int @default(5)

  // The encounters that this creature has been a part of
  encounters Creature[]
}

model Creature {
  id String @id @unique @default(uuid())

  // The name of the creature
  name String

  // How much health does this creature have
  health Int

  // How much damage does this creature do
  attack Int

  // How much defence does this creature have
  defence Int

  // The encounter that this creature is a part of
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  encounterId String

  // What is the template for this creature
  template   CreatureTemplate @relation(fields: [templateId], references: [id])
  templateId String
}

enum EntityType {
  CREATURE     @map("CREATURE")
  GUILD_MEMBER @map("GUILD_MEMBER")
}

model Initative {
  id String @id @unique @default(uuid())

  // The encounter that this is a part of
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  encounterId String

  // Their roll
  roll Int

  // The order that they are taking their turn
  order Int

  // The ID of the creature or guild member that is taking their turn
  entityId String

  // The type of entity that is taking their turn
  entityType EntityType
}

model Encounter {
  id String @id @unique @default(uuid())

  // Where is this encounter taking place
  location Location

  // The creatures that are being encountered
  creatures Creature[]

  // The guild members that are encountering the creatures
  guildMembers GuildMember[] @relation("currentEncounter")

  // The members who were part of the encounter
  previousGuildMembers GuildMember[] @relation("previousEncounters")

  // The guild that this encounter is taking place in
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  // The time that this encounter started
  start DateTime @default(now())

  // The time that this encounter ended
  end DateTime?

  // Inititive order
  initatives Initative[]

  // Attacks that have happened during this encounter
  attacks Attack[]

  // The current turn
  turn Int @default(0)
}

model Attack {
  id String @id @unique @default(uuid())

  // The encounter that this event is a part of
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  encounterId String

  // The time that this event happened
  time DateTime @default(now())

  // The attacker
  attackerId   String?
  attackerType EntityType?

  // The defender
  defenderId   String?
  defenderType EntityType?

  // The damage that was done
  damage Int
}
